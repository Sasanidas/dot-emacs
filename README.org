* Введение

В этом репозитории находится моя конфигурация редактора [[https://www.gnu.org/software/emacs/][Emacs]].

Редактор Emacs - это главный инструмет моей профессиональной
деятельности, которая в первую очередь включает в себя разработку
программного обеспечения и всё, что с этим связано - исследование,
администрирование, тестирование, отладка, написание документации и
т.п.

* Установка

Для установки Emacs и его конфигурации, пользователи Ubuntu могут
воспользоваться следующей командой:

#+BEGIN_SRC sh
  wget https://raw.github.com/snosov1/bash/master/setup-ubuntu.bash -O /tmp/setup-ubuntu.bash && bash /tmp/setup-ubuntu.bash
#+END_SRC

Во время её выполнения устанавливается сам Emacs, клонируется этот
репозиторий и в домашнюю директорию добавляются символьные ссылки на
файлы из репозитория.

Пользователи других ОС могут проделать эти шаги в ручную. Вместо
создания символьных ссылок, файлы можно просто скопировать в домашнюю
директорию.

Для запуска нужно в терминале выполнить команду =emacs=, либо
воспользоваться любым другим способом, предоставляемым операционной
системой.

* Предисловие

Если ты установил Emacs и эту конфигурацию - ты уже на полпути к
личному успеху. Теперь ты можешь делать в нём ВСЁ, ЧТО УГОДНО! Во
истину, захватывающие возможности - но не исключено, что кому-то
интересен более конкретный ответ на вопрос "Куды бечь и что делать?".

Как раз для таких написан этот небольшой обзор. Возможно, ты вообще
никогда ничего не программировал в своей жизни и при работе с
компьютером ограничивался браузером и меню компьютерных игр, а теперь
тебе захотелось написать свою собственную игру или сайт. Возможно, ты
что-то программировал в школе или университете, глядя в голубой экран
с текстом на языке Паскаль и вот сейчас в твоих висках неожиданно
застучали воспоминания и огнём вспыхнули дерзкие мысли. Возможно, ты
программировал на C# в Visual Studio под Windows и чувствуешь, что
настоящая жизнь проходит мимо и захотел отправиться её искать.

Во всех этих случаях, а также, если ты обычный
программист/администратор/журналист/..., который вдруг осознал, что
написание и перестановка буковок на экране занимает значительную часть
твоего дня. Если ты задумался, почему ты вынужден ставить десяток
программ - каждую со своим текстовым редактором разной степени
убогости - для не очень-то разных задач. Если тебе непонятно, почему
ты должен к ним привыкать, воевать с ними и вообще пользоваться ими,
то ты зашел по адресу.

Не секрет, что редактирование текста - это первейшая задача при работе
за компьютером и было бы странно, если бы она до сих пор не была
решена. И решили её давно - созданием Emacs.

И также попутно решили вопрос с тем, как человек может удобно
организовать и обработку созданного текста. Языки программирования
приходят и уходят, а Emacs остается. Языки вёрстки - LaTeX, HTML,
Markdown - приходят и уходят - а Emacs остается. Операционные системы
приходят и уходят, а Emacs - прекрасно работает практически на любой
из них.

Кому-то может показаться, что я передергиваю и бессовестно пользуюсь
рекламными трюками. Однако, судите сами - за короткую историю
компьютеров и программного обеспечения, мы уже привыкли к тому, что
новые идеи и решения устаревают, едва успев появиться. Поэтому, на мой
взгляд, программа, которой больше сорока лет, которая жива, работает,
и которую используют десятки и сотни тысяч людей по сей день, как
минимум, внушает интерес и доверие - по всей видимости, что-то в ней
сделано как следует.

* Минимальные требования

Список того, что требуется от читателя - совсем небольшой - но очень
важный:

- Во-первых, ты должен научиться печатать вслепую. Переоценить
  важность этого навыка невозможно. Если у тебя его нет - прямо сейчас
  прекращай чтение и возвращайся, когда научишься. Никакие программы,
  инструменты, автодополнения, подсказки, интуитивно понятные
  интерфейсы не улучшат качество твоей работы, как слепая печать.

  Самый простой способ - прохождение курса [[http://ergosolo.ru/]["Соло на клавиатуре"]]. Первым
  делом нужно пройти английский курс, после этого, по желанию -
  русский. Повторяю, если ты не умеешь печатать вслепую - переходи по
  ссылке и начинай обучение. Прямо сейчас.

  Этот параграф читать должны уже только те, кто умеет печатать
  вслепую, и если это про тебя - то смело переходи к следующему
  пункту. Если же ты продолжил читать, но, к своему стыду, не умеешь
  печатать вслепую, то у меня есть ещё несколько слов.

  Главный аргумент, почему люди не учатся печатать вслепую - "у меня и
  так всё нормально".

  Этот аргумент легко отбивается - "ничего у тебя не нормально". Дело
  в том, что когда говорят о слепой печати - в первую очередь говорят
  о скорости набора. И те, кто научился двумя пальцами набирать по 100
  знаков в минуту, говорят, что они и так хорошо справляются - быстрее
  не надо.

  Действительно, со стороны, скорость - это самый заметный и
  интересный аспект - но с практической точки зрения он интересен
  разве только стенографисткам. Средний программист, к примеру, в день
  набирает около 100 (ста) строк кода. Скорость, с которой он их
  наберет даже тыкая двумя пальцами по клавиатуре - всего лишь
  небольшая толика 8ми-часового рабочего дня.

  Может показаться, что 100 строк в день - это заниженная оценка, но
  на самом деле она легко объясняется. Как правило, программист
  гораздо больше думает о том, что нужно написать, чем непосредственно
  пишет. То же самое можно сказать и о писателе или
  журналисте. Человек не может сочинять текст на скорости 300 символов
  в минуту. Нужно подбирать слова, перечитывать написанное,
  переставлять абзацы и предложения - именно это занимает большую
  часть времени.

  Поэтому в навыке слепой печати намного важнее то, что человек
  перестает думать о том, *КАК* он печатает и у него освобождается
  время для обдумывания того, *ЧТО* нужно напечатать.

  И это совсем не так, если человек печатает двумя пальцами. Ему нужно
  перевести взгляд с монитора на клавиатуру, а потом обратно, нужно
  найти буквы на клавиатуре. В результате фраза "Добрый день" в голове
  превращается в "Lj,hs-блин, язык не
  переключил,del,del,del,del,del-Д-о-б-р-ы-ы-ы-где-ы?-ы-й д-е-н-ь!". И
  к тому времени, как человек её набрал он уже забыл, что хотел
  написать в письме.

  Представь, также что ты вынужден был бы думать о том, как и когда
  делать вдохи и выдохи - с большими шансами ты вообще не смог бы
  думать больше ни о чем другом, а думал только как бы не задохнуться.

  Таким образом, главный плюс слепой печати - среди прочих неоспоримых
  и важных преимуществ - заключается в том, что печать для тебя
  становится навыком, записанным на подкорке мозга - ты просто
  перестаешь о нем думать - как о ходьбе, дыхании и проч.

  Второй аргумент, почему люди не учатся печатать вслепую - "у меня
  нет времени на обучение".

  Этот аргумент ещё мощнее первого. "Вслепую я печатаю в три раза
  медленнее, сбиваюсь и забываю клавиши, а мне нужно срочно писать
  курсовую/диплом/работу/...".

  Прохождение курса "Соло на клавиатуре" в среднем занимает у человека
  40 (сорок) часов работы за клавиатурой (всё время занимает ненамного
  больше). Наверное, в твоей жизни что-то не так, если для обретения
  навыка, который качественно улучшит твою профессиональную
  деятельность до конца жизни, у тебя нет сорока часов. 40 часов - это
  один месяц по 2 часа в день, неделя - по 6 часов в день. Сколько
  времени ты посвящаешь чтению новостей, просмотру YouTube,
  прослушиванию музыки и т.п.?

  Да и вообще, представь, что тебе полгода и ты научился ползать по
  квартире. В год родители тебя заставляют ходить - а ты им
  объясняешь, что можешь доползти куда хочешь и тебе непонятно, зачем
  нужно ходить - перемещаешься ты гораздо медленнее, постоянно
  падаешь. И где бы ты был, если бы в 20 лет по-прежнему ползал и не
  умел ходить?

  Третий аргумент. Многим кажется, что овладеть этим навыком очень
  сложно. Действительно, задуматься только - надо же запомнить порядка
  30 клавиш, а если печатать на 2х языках - то порядка 70. Их все
  нужно ПОСТОЯННО ПОМНИТЬ.

  Главный секрет здесь - думать надо меньше. Я не зря всё время
  провожу аналогии с ходьбой, дыханием и подобными действиями - все
  они управляются не сознанием, а подсознанием. В процессе обучения -
  ты действительно будешь задумываться где расположена какая-то
  клавиша. Но этот процесс очень быстро запишется под корку головного
  мозга и не будет требовать вообще никаких умственных усилий. Вообще
  никаких. Клавиши будут нажиматься чисто машинально.

  Кстати сказать, это ещё и положительно сказывается на количестве
  ошибок. В моем детстве был мультфильм про сороконожку, которую
  спросили, как она управляется со своими ногами, она ничего толком не
  ответила и ушла, но задумалась. И когда она стала думать, как ей
  шагать - ноги у неё стали заплетаться и она постоянно падала, а
  когда она отвлеклась, то спокойно пошла, как раньше.

  Итак, надеюсь, я убедил тебя научиться печатать вслепую. Если после
  всех моих стараний ты всё-таки решишь продолжить без этого навыка,
  или если ты решил начать занятия параллельно чтению этого обзора, то
  хотя бы положи руки на клавиатуру правильно и старайся жать кнопки
  правильными пальцами.

  После того, как я прошел курс обучения на английском языке,
  по-русски я всё ещё печатал глядя на клавиатуру. Но я привык держать
  руки правильно и однажды во время печати меня осенило, что я уже
  около часа печатаю по-русски и ни разу не поглядел на клавиатуру. Я
  стал придумывать слова, а мои пальцы сами их набирали. Причем, для
  того, что вспомнить где находится какая-то конкретная клавиша, мне
  приходилось подумать секунд 5, а текст набирался совершенно
  непринужденно - при условии, что я думал о тексте, а не о клавишах.

  Надеюсь, этот прием поможет и тебе, мой ленивый читатель.

- Оставшиеся 2 пункта не потребуют 40 часов твоего
  времени. Фактически, они потребуют всего пару минут твоего времени -
  с ними нужно будет просто смириться.

  Первый из них - нужно изменить конфигурацию клавиатуры, чтобы Caps
  Lock выступал в роли третьего Ctrl'а. С первого взгляда это может
  показаться диким, но это то, что обязательно нужно сделать.

  Во-первых, используешь ты Emacs или нет, Caps Lock - это абсолютно
  бесполезная кнопка, которая занимает одну из самых удобных позиций
  на клавиатуре. Объяснить это чем-то кроме исторического
  недоразумения невозможно.

  Вообще, раскладка клавиатуры, которая повсеместно используется
  сегодня - т.н. QWERTY - сама по себе является историческим
  недоразумением. Она была придумана во времена печатных машинок и
  одним из главных факторов, повлиявших на её создание было то, что
  механические молоточки, которые выбивали символы на бумаге, не
  должны были цепляться друг за друга. Для этого буквы, которые часто
  встречаются вместе, старались развести как можно дальше друг от
  друга.

  Т.е. частота использования клавиш, частота использования разных
  пальцев, частота чередования рук - все эти метрики практически не
  учитывались при разработке QWERTY - её просто делали такой, чтобы
  механическая машинка могла работать.

  Одной из первых раскладок, которая попыталась исправить это
  недоразумение была Dvorak - и сегодня именно она является второй по
  используемости раскладкой. При её разработке как раз учитывались все
  те факторы, которые я перечислил - самые часто используемые символы
  поместили на средний ряд, постарались, чтобы часто встречающиеся
  сочетания двух букв как можно чаще набирались разными руками и
  т.д. А работоспособность механической машинки не учитывалась вовсе,
  потому что их вытеснили клавиатуры.

  Для набора текста раскладка Dvorak по всем параметрам лучше
  QWERTY. Все мировые рекорды скорости до недавнего времени ставились
  только на ней. QWERTY не было даже близко в рекордных таблицах.

  И по уму, все уже давно должны были перейти на Dvorak, но реальность
  диктовала свои условия - куда бы ты ни пришел - везде стоят только
  QWERTY-клавиатуры, операционные системы не поддерживают других
  раскладок или их не очень просто настроить. Плюс - многие полезные
  комбинации кнопок, например, отмена последнего действия, вырезать,
  копировать, вставить, располагаются на Ctrl-Z, Ctrl-X, Ctrl-C,
  Ctrl-V, и если сменить раскладку - то они разлетятся по всей
  клавиатуре.

  Для преодоления этих трудностей относительно недавно была придумана
  раскладка Colemak - которая сравнима по ключевым параметрам с
  Dvorak, но гораздо больше похожа на QWERTY, чем Dvorak. Кроме того,
  названные клавиши - Z, X, C, V - вообще остались на тех же
  местах. Всё это, плюс - поддержка современными операционными
  системами, плюс - активная реклама, сделали эту раскладку третьей по
  популярности на сегодняшний день.

  Но для чего я это рассказываю? А для того, что создатели Colemak
  тоже заметили, что Caps Lock - это бесполезная кнопка на отличном
  месте. И на её место они посадили Backspace. Печатальщики-пьюристы,
  наверное, раскритиковали бы такое решение, дескать, "настоящему
  печатальщику не нужен Backspace, потому что он не совершает
  ошибок". Но, на мой взгляд - это хорошее решение.

  И не пользуйся я Emacs'ом - поступил бы точно так же. Но самая часто
  используемая не-буквенная клавиша при работе в Emacs - это именно
  Ctrl, поэтому именно он заслуживает самого удобного положения. А
  вопрос с Backspace'ом там решен по-другому.

  Кроме того, раз уж мы рассматриваем вопрос в историческом контексте,
  то на старых Unix-овых клавиатурах Ctrl располагался именно на месте
  Caps Lock'a. Либо, на некоторых вариантах - на месте нынешнего
  Alt'a - тоже в легко досягаемой позиции. Что, собственно, и
  мотивировало его частое использование в редакторах того времени, к
  которым относится Emacs.

  Агитационный блок на этом закончен и теперь, самое главное - как же
  сделать так, чтобы Caps Lock выполнял функцию Ctrl? Если ты -
  пользователь Ubuntu и воспользовался для установки строчкой,
  приведенной в секции 'Установка', то у меня для тебя хорошие
  новости! Тебе нужно просто перезагрузиться и, хочешь ты того или
  нет, твой Caps Lock станет третьим Ctrl'ом. Всем остальным могу
  порекомендовать воспользоваться услугами Google или Yandex для
  решения этого вопроса.

  Как всегда, в целом, без этого можно прожить - но выглядеть это
  будет как если бы ты перемещался, привязав правую ногу к левой
  веревкой.

- И последнее. Настоятельно рекомендую настроить переключение языков
  (с русского на английский и наоборот) на сочетание Shift-Shift.

  Дело в том, что в Emacs время от времени придется использовать
  сочетания, предусматривающие одновременное нажатие Ctrl-Alt,
  Ctrl-Shift и Shift-Alt. И если какая-то из этих комбинаций также
  переключает язык - то время от времени он будет нечаянно
  переключаться.

  Установочный скрипт не делает этого, так что даже пользователям
  Ubuntu придется открыть настройки системы. Я в тебя верю, мой
  ответственный читатель!

* Обозначения

Единственное, что нужно обговорить перед тем, как перейти
непосредственно к работе - это обозначения комбинаций клавиш:

1. =С-= обозначает =Ctrl=.
2. =M-= обозначает =Alt=. Пользователи продукции Apple могут не найти
   у себя такой кнопки, её место (насколько мне известно) занимает
   клавиша =Cmd= и именно она функционирует в роли =M-=.
3. =S-= обозначает =Shift=.

Эти символы участвуют в обозначении комбинаций клавиш, например:
- =C-n= означает =Ctrl-n=
- =C-x C-f= означает, что надо нажать =Ctrl-x= и потом =Ctrl-f=
- =C-c f= - означает, что нужно нажать =Ctrl-c= и (с отпущенным
  =Ctrl=) нажать =f=

Теперь можно начинать!

* Начало работы

Когда ты в первый раз запустишь Emacs, он предложит тебе установить
недостающие /пакеты/. Можно нажать =!= для того, чтобы согласиться на
установку всего, что нужно. После этого тебе откроется т.н. черновой
/буфер/, в котором можно уже что-нибудь напечатать.

Попробуй набрать небольшой абзац. Уверен, что у тебя всё получится без
дополнительных объяснений. Стрелки и все остальные символы работают
как обычно.

Единственное, возможно, ты привык использовать кнопки Ctrl-z, Ctrl-x,
Ctrl-c и Ctrl-v при редактировании. В Emacs эти комбинации выполняют
совсем другие функции. Подробнее я расскажу о том, как устроены
копирование и вставка в Emacs позже, а первое время можно просто
использовать следующие аналоги:

- =C-/= - отмена последнего действия
- =C-w= - /вырезать/
- =M-w= - /копировать/
- =C-y= - /вставить/

Эти комбинации могут показаться довольно странными, например, =C-/= и
=C-y= трудно нажать одной рукой, но если ты обе руки держишь на
клавиатуре - то, в целом, они самые обыкновенные. А поскольку
отучиться пользоваться мышкой - второй по важности для улучшения
качества работы пункт (после слепой печати), то это даже играет на
пользу.

Теперь попробуем открыть какой-нибудь файл. Для этого используем
комбинацию =C-x C-f= (либо =C-x f=). Внизу, в т.н. /минибуфере/
появится имя текущей директории и начало списка находящихся в ней
файлов.

По мере того, как ты будешь набирать имя файла, будут оставаться
только те варианты, которые соответствуют набранным
символам. Например, можно набрать "rdme", и если в директории есть
файл с именем "Readme.txt" (регистр не учитывается), то он останется в
числе кандидатов. При наборе можно пропускать символы, но порядок
должен оставаться тем же, что и в имени файла, т.е. если, набрать
"drme", то "Readme.txt" уже пропадет из списка кандидатов.

При открытии файла работают следующие команды:

- =Enter= - открыть подсвеченный файл или зайти в директорию
- =Backspace= - вверх на одну директорию
- =C-s= - следующий кандидат в списке
- =C-r= - предыдущий кандидат в списке

После внесения изменений, файл можно сохранить командой =C-x
C-s=. Сохранить его с другим именем можно командой =C-x C-w=.

Для выхода из Emacs используется сочетание =C-x C-c=.

Теперь ты должен быть в состоянии пользоваться Emacs в повседневной
жизни вместо своего прошлого любимого текстового редактора,
практически не изменяя старым привычкам. Дальше пойдут бонусы.

* Базовые операции

Начнем привыкать к хорошему с базовых вещей. Во-первых, нужно забыть
про стрелочки для перемещения курсора:

- =C-n= - вниз (next line)
- =C-p= - вверх (previous line)
- =C-f= - вперед (forward char)
- =C-b= - назад (backward char)

Любое перемещение рук с их рабочего положения - к стрелочкам,
PgUp-ам/PgDown-ам/Home-ам/End-ам - это работа от локтя, которая плохо
автоматизируется и менее энергоэффективна, чем работа
пальцами. Поэтому в первую очередь мы будем переучиваться использовать
буквенные клавиши для выполнения частых операций.

Вот эквиваленты других часто используемых команд:

- =C-a= - в начало строки
- =C-e= - в конец строки
- =C-v= - вниз на величину экрана (=PgDown=)
- =M-v= - вверх на величину экрана (=PgUp=)
- =M->= - в конец буфера (=End=)
- =M-<= - в начало буфера (=Home=)
- =C-h= - удалить символ слева от курсора (=Backspace=)
- =C-d= - удалить символ справа от курсора (=Delete=)
- =С-j= - перевод строки

Можно считать, что =С-j= - это замена клавиши =Enter=, но с небольшой
разницой. Если задуматься, то =Enter=, вообще говоря, выполняет 2
функции - перевод строки и "ввод". Например, если ты набираешь строку
поиска в Гугл, то, нажав =Enter= ты выполняешь поиск, а не переводишь
строку, т.е. в зависимости от ситуации, =Enter= ведет себя тем или
иным образом.

В Emacs эти две функции разнесены на разные кнопки. 95 процентов
времени ты будешь использовать именно =C-j=, поскольку тебе нужен
будет перевод строки, а в тех ситуациях, когда это не вызывает
двусмысленности, =C-j= будет работать и как "ввод". Но в некоторых
ситуациях, которые мы встретим позже, нужно будет различать эти
функции - для этого "ввод" в Emacs осуществляется на =C-m=.

* Работа со словами и абзацами

Работать в редакторе с отдельными символами примерно так же
эффективно, как умножение заменять сложением. Как правило, человек не
оперирует в голове отдельными символами, а оперирует структурными
единицами - словами, предложениями, абзацами, что в языках
программирования соответствует идентификаторам, выражениям и блокам
(либо функциям). Поэтому гораздо удобнее пользоваться командами,
которые оперируют с этими же структурными единицами.

Если в посимвольных командах использовать клавишу =M-=, то это как раз
позволит оперировать более сложными единицами:

- =M-f= - следующее слово (forward word)
- =M-b= - предыдущее слово (backward word)
- =M-a= - в начало абзаца (функции в языках программирования)
- =M-e= - в конец абзаца (функции)
- =C-M-h= - удалить слово слева от курсора
- =M-d= - удалить слово справа от курсора

** dired (картинки)
** ido
** C-x C-s, C-x C-c, C-x k
** переключение языка
** перемещение (C-a, C-e, M->, M-<, C-M-n, C-M-p, M-g g)
** посимвольные операции (не забыть C-t)
** пословные операции (subword) (важно - что C-M-b, C-M-f бегают по скобкам)
** M-z
** Undo
** C-x C-o, M-\
** M-p, M-n
** M-c, M-u, M-l
** C-o, M-j
** выделение региона (С-x h)
** kill/yank, kill-ring
** Парные скобочки, удаление
** C-=
** C-s, C-r (не забыть, что можно выделить и нажать и оно его будет искать), M-s o, M-% (C-q C-j)
** C-v, M-v, C-l
** Контекстное авто-дополнение
* Работа с окошками
* Поиск
* Как поставить dmd
** M-&
** пишем программу - комментарии, M-q
** компилируем
** создаем репозиторий, смотрим в магит
** выкладываем на гитхаб
** Таги
* Пишем презентацию в орг-моде, в маркдауне (починить нумерованый список)
* Разное
** пользование документацией
** Редактирование под рутом
** grep, wgrep
** M-|
** редактирование в диред
** клавиатурные макросы
** несколько курсоров (rectangular regions)
** remote-term
** проверка правописания
** Выполнение лиспа
** Google, Lingvo
