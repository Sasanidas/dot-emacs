#+AUTHOR: Sergei Nosov
#+EMAIL: sergei.nosov@gmail.com

* Foreword

This is a little novel for casual reading about a text editor. Incidentally, it
also works as an Emacs configuration file.

WARNING: WORK IN PROGRESS!

* Contents                                                              :TOC:
 - [[#foreword][Foreword]]
 - [[#ui-customization][UI customization]]
     - [[#lean-and-mean][Lean and mean]]
     - [[#dark-tango][Dark tango]]
     - [[#deja-vu][Deja Vu]]
     - [[#forbidden-fruit][Forbidden fruit]]
 - [[#abbreviations][Abbreviations]]
 - [[#terminal-emulator][Terminal emulator]]

* UI customization

** Lean and mean

Emacs doesn't need a lot of UI elements - it should be lean and mean. Well, and
clean, and it should look good on the screen.

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (setq inhibit-startup-message t)
#+END_SRC

** Dark tango

For some reason, my eyes like dark background. Not pitch black, but pretty
black.

#+BEGIN_SRC emacs-lisp
  (defun configure-theme ()
    "Make Emacs pretty"
    (load-theme 'tango-dark)
    (enable-theme 'tango-dark)
    ;; make background a little bit darker
    (set-background-color "#1d1f21"))

  (configure-theme)
#+END_SRC

** Deja Vu

DejaVu fonts family is simply the best one out there. And DejaVu Sans Mono is
the brightest child in the family:

- it covers a hell lot of Unicode symbols
- it's community-driven and MIT/public domain licensed
- it makes l, 1 and I clearly distinguishable, as well as 0 and O
- it's beautiful looking

Basically, DejaVu Sans Mono is a "font done right" for technical work.

#+BEGIN_SRC emacs-lisp
  (ignore-errors
    (set-frame-font
     (car (x-list-fonts "-*-DejaVu Sans Mono-normal-normal-normal-*-*-*-*-*-*-*-iso10646-1"))))
#+END_SRC

** Forbidden fruit

This section is supposed to make Emacs more usable on Mac's, but since I've
never owned a Mac, I can't really tell whether it works at all. If you own a
Mac, please, enlighten me!

#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta)
#+END_SRC

* Abbreviations

I have a collection of abbreviations for commands, that I use rarely enough to
forget their actual spelling, but often enough to get annoyed every time I have
to look it up somewhere.

As a simplest example, I always forget how to use the =ln= command to create a
symbolic link. Where do you have to put =-s=? Where is the target path and where
is the link name? I know, it's ridiculous, but I was making mistakes every time
I tried to use it.

Now, I simply print =ln=, hit =M-/= for =hippie-expand= and it becomes =ln -s
target link= and I'm happy.

The abbreviations are listed in =.abbrev_defs= file and, basically, all of them
are commands, which do something simple, but are represented by a random-looking
symbols sequence.

I also use =yasnippet= for a similar functionality, but it didn't work very well
for me in minibuffer. And since I use minibuffer to issue shell commands (=M-&=)
quite often, I use abbreviations for common shell commands and =yasnippet= for
everything else.

#+BEGIN_SRC emacs-lisp
  (when (require 'abbrev nil t)
    (add-hook 'find-file-hook
              '(lambda()
                 (abbrev-mode -1)))
    (setq-default abbrev-mode nil))
#+END_SRC

* Terminal emulator
